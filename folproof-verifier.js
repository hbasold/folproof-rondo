(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.folproof = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (process){(function (){
/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"proof":3,"clause_list":4,"proof_option0":5,"ENDOFFILE":6,"box":7,"EOL":8,"BOX":9,"with":10,"box_option0":11,"DEBOX":12,"box_option1":13,"sentence":14,"box_option2":15,"WITH":16,"ID":17,"e_top":18,"EXISTS":19,"DOT":20,"FORALL":21,"e_or":22,"IFF":23,"IMPLIES":24,"e_and":25,"OR":26,"e_eq":27,"AND":28,"EQUALS":29,"e_not":30,"NOT":31,"atom":32,"term":33,"BOTTOM":34,"LPAREN":35,"RPAREN":36,"term_list":37,"COMMA":38,"JUSTIFICATION":39,"$accept":0,"$end":1},
terminals_: {2:"error",6:"ENDOFFILE",8:"EOL",9:"BOX",12:"DEBOX",16:"WITH",17:"ID",19:"EXISTS",20:"DOT",21:"FORALL",23:"IFF",24:"IMPLIES",26:"OR",28:"AND",29:"EQUALS",31:"NOT",34:"BOTTOM",35:"LPAREN",36:"RPAREN",38:"COMMA",39:"JUSTIFICATION"},
productions_: [0,[3,3],[4,1],[4,3],[4,0],[7,6],[7,4],[7,2],[10,2],[14,1],[14,1],[18,4],[18,4],[18,3],[18,3],[18,1],[22,3],[22,1],[25,3],[25,1],[27,3],[27,1],[30,2],[30,1],[32,1],[32,1],[32,3],[37,1],[37,3],[37,0],[33,4],[33,1],[5,0],[5,1],[11,0],[11,1],[13,0],[13,1],[15,0],[15,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: this.$ = $$[$0-2]; return this.$; 
break;
case 2: this.$ = [$$[$0]]; 
break;
case 3: this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 4: this.$ = []; 
break;
case 5: this.$ = ['folbox', $$[$0-2], $$[$0-4], this._$]; 
		if ($$[$0-2] && $$[$0-2][0] && $$[$0-2][0][0] == 'rule' && $$[$0-2][0][2].auto)
			$$[$0-2][0][2] = ['assumption', null];
	
break;
case 6: this.$ = ['box', $$[$0-2], this._$]; 
		if ($$[$0-2] && $$[$0-2][0] && $$[$0-2][0][0] == 'rule' && $$[$0-2][0][2].auto)
			$$[$0-2][0][2] = ['assumption', null];
	
break;
case 7: this.$ = $$[$0-1][0] != 'error'
			? ['rule', $$[$0-1], $$[$0], this._$]
			: $$[$0-1]; 
		if (this.$[0] === 'rule' && !this.$[2]) {
			this.$[2] = ['premise', null];
			this.$[2].auto = true;
		}
	
break;
case 8: this.$ = ['with', $$[$0]]; 
break;
case 10: this.$ = ['error', yytext]; 
break;
case 11: this.$ = ['exists', $$[$0-2], $$[$0]]; 
break;
case 12: this.$ = ['forall', $$[$0-2], $$[$0]]; 
break;
case 13: this.$ = ['<->', $$[$0-2], $$[$0]]; 
break;
case 14: this.$ = ['->', $$[$0-2], $$[$0]]; 
break;
case 15: this.$ = $$[$0]; 
break;
case 16: this.$ = ['or', $$[$0-2], $$[$0]]; 
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = ['and', $$[$0-2], $$[$0]]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = ['=', $$[$0-2], $$[$0]]; 
break;
case 21: this.$ = $$[$0]; 
break;
case 22: this.$ = ['not', $$[$0]]; 
break;
case 23: this.$ = $$[$0]; 
break;
case 24: this.$ = $$[$0]; 
break;
case 25: this.$ = ['bot']; 
break;
case 26: this.$ = $$[$0-1]; this.$.userParens = true; 
break;
case 27: this.$ = [$$[$0]]; 
break;
case 28: this.$ = $$[$0]; this.$.unshift($$[$0-2]); 
break;
case 29: this.$ = []; 
break;
case 30: this.$ = ['id', $$[$0-3], $$[$0-1]]; 
break;
case 31: this.$ = ['id', $$[$0]]; 
break;
}
},
table: [{2:[1,7],3:1,4:2,6:[2,4],7:3,8:[2,4],9:[1,4],14:5,17:[1,19],18:6,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{1:[3]},{5:20,6:[2,32],8:[1,21]},{6:[2,2],8:[2,2],12:[2,2]},{2:[1,7],4:23,7:3,8:[2,4],9:[1,4],10:22,12:[2,4],14:5,16:[1,24],17:[1,19],18:6,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{6:[2,38],8:[2,38],12:[2,38],15:25,39:[1,26]},{6:[2,9],8:[2,9],12:[2,9],36:[2,9],39:[2,9]},{6:[2,10],8:[2,10],12:[2,10],36:[2,10],39:[2,10]},{17:[1,27]},{17:[1,28]},{6:[2,15],8:[2,15],12:[2,15],23:[1,29],24:[1,30],36:[2,15],39:[2,15]},{6:[2,17],8:[2,17],12:[2,17],23:[2,17],24:[2,17],26:[1,31],36:[2,17],39:[2,17]},{6:[2,19],8:[2,19],12:[2,19],23:[2,19],24:[2,19],26:[2,19],28:[1,32],29:[1,33],36:[2,19],39:[2,19]},{6:[2,21],8:[2,21],12:[2,21],23:[2,21],24:[2,21],26:[2,21],28:[2,21],29:[2,21],36:[2,21],39:[2,21]},{17:[1,19],30:34,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{6:[2,23],8:[2,23],12:[2,23],23:[2,23],24:[2,23],26:[2,23],28:[2,23],29:[2,23],36:[2,23],39:[2,23]},{6:[2,24],8:[2,24],12:[2,24],23:[2,24],24:[2,24],26:[2,24],28:[2,24],29:[2,24],36:[2,24],39:[2,24]},{6:[2,25],8:[2,25],12:[2,25],23:[2,25],24:[2,25],26:[2,25],28:[2,25],29:[2,25],36:[2,25],39:[2,25]},{2:[1,7],14:35,17:[1,19],18:6,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{6:[2,31],8:[2,31],12:[2,31],23:[2,31],24:[2,31],26:[2,31],28:[2,31],29:[2,31],35:[1,36],36:[2,31],38:[2,31],39:[2,31]},{6:[1,37]},{2:[1,7],6:[2,33],7:38,9:[1,4],14:5,17:[1,19],18:6,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{8:[1,39]},{8:[1,41],12:[2,36],13:40},{17:[1,42]},{6:[2,7],8:[2,7],12:[2,7]},{6:[2,39],8:[2,39],12:[2,39]},{20:[1,43]},{20:[1,44]},{17:[1,19],18:45,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{17:[1,19],18:46,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{17:[1,19],22:47,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{17:[1,19],25:48,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{17:[1,19],30:49,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{6:[2,22],8:[2,22],12:[2,22],23:[2,22],24:[2,22],26:[2,22],28:[2,22],29:[2,22],36:[2,22],39:[2,22]},{36:[1,50]},{17:[1,19],33:52,36:[2,29],37:51},{1:[2,1]},{6:[2,3],8:[2,3],12:[2,3]},{2:[1,7],4:53,7:3,8:[2,4],9:[1,4],12:[2,4],14:5,17:[1,19],18:6,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{12:[1,54]},{2:[1,7],7:38,9:[1,4],12:[2,37],14:5,17:[1,19],18:6,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{8:[2,8]},{17:[1,19],18:55,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{17:[1,19],18:56,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{6:[2,13],8:[2,13],12:[2,13],36:[2,13],39:[2,13]},{6:[2,14],8:[2,14],12:[2,14],36:[2,14],39:[2,14]},{6:[2,16],8:[2,16],12:[2,16],23:[2,16],24:[2,16],36:[2,16],39:[2,16]},{6:[2,18],8:[2,18],12:[2,18],23:[2,18],24:[2,18],26:[2,18],36:[2,18],39:[2,18]},{6:[2,20],8:[2,20],12:[2,20],23:[2,20],24:[2,20],26:[2,20],28:[2,20],29:[2,20],36:[2,20],39:[2,20]},{6:[2,26],8:[2,26],12:[2,26],23:[2,26],24:[2,26],26:[2,26],28:[2,26],29:[2,26],36:[2,26],39:[2,26]},{36:[1,57]},{36:[2,27],38:[1,58]},{8:[1,60],11:59,12:[2,34]},{6:[2,6],8:[2,6],12:[2,6]},{6:[2,11],8:[2,11],12:[2,11],36:[2,11],39:[2,11]},{6:[2,12],8:[2,12],12:[2,12],36:[2,12],39:[2,12]},{6:[2,30],8:[2,30],12:[2,30],23:[2,30],24:[2,30],26:[2,30],28:[2,30],29:[2,30],36:[2,30],38:[2,30],39:[2,30]},{17:[1,19],33:52,36:[2,29],37:61},{12:[1,62]},{2:[1,7],7:38,9:[1,4],12:[2,35],14:5,17:[1,19],18:6,19:[1,8],21:[1,9],22:10,25:11,27:12,30:13,31:[1,14],32:15,33:16,34:[1,17],35:[1,18]},{36:[2,28]},{6:[2,5],8:[2,5],12:[2,5]}],
defaultActions: {37:[2,1],42:[2,8],61:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        _handle_error:
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var error_rule_depth;
                var errStr = '';
                function locateNearestErrorRecoveryRule(state) {
                    var stack_probe = stack.length - 1;
                    var depth = 0;
                    for (;;) {
                        if (TERROR.toString() in table[state]) {
                            return depth;
                        }
                        if (state === 0 || stack_probe < 2) {
                            return false;
                        }
                        stack_probe -= 2;
                        state = stack[stack_probe];
                        ++depth;
                    }
                }
                if (!recovering) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected,
                        recoverable: error_rule_depth !== false
                    });
                } else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }
                if (recovering == 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                    }
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    symbol = lex();
                }
                if (error_rule_depth === false) {
                    throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                }
                popStack(error_rule_depth);
                preErrorSymbol = symbol == TERROR ? null : symbol;
                symbol = TERROR;
                state = stack[stack.length - 1];
                action = table[state] && table[state][TERROR];
                recovering = 3;
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* comments are ignored */
break;
case 1:return 28;
break;
case 2:return 26;
break;
case 3:return 24;
break;
case 4:return 23;
break;
case 5:return 31;
break;
case 6:return 29;
break;
case 7:return 16;
break;
case 8:/* ignore digits, for now */
break;
case 9:
				// Syntax: "[...] : ruleName [[elim/intro] [NumOrRange[, NumOrRange]*]]
				
				// strip the leading colon and spaces
				yy_.yytext = yy_.yytext.substr(yy_.yytext.substr(1).search(/\S/));
				yy_.yytext = yy_.yytext.trim();

        // find the beginning of the first line number
				var pos = yy_.yytext.search(/\s+\d+/);
				var lineranges = null;
				if (pos != -1) {
					lineranges = yy_.yytext.substr(pos+1).split(/\s*,\s*/);
          yy_.yytext = yy_.yytext.substr(0, pos);
				}

        // If there is a substitution, then it comes after a dot that separates the rule name from
        // the substitution.
        var ruleApp = yy_.yytext.split('.', 2);
        var name = null;
        var substParts = null;
        if (ruleApp.length == 2){
           name = ruleApp[0].trim();
           var substParts = ruleApp[1].split(',');
           var rem = substParts[substParts.length - 1].split(' ', 2);
           substParts[substParts.length - 1] = rem[0];
           if(rem.length >= 2){
             yy_.yytext = rem[1];
           } else {
             yy_.yytext = "";
           }
        } else {
           var parts = yy_.yytext.split(' ', 2);
           name = parts[0];
           if(parts.length >= 2){
             yy_.yytext = parts[1];
           } else {
             yy_.yytext = "";
           }
        }
				var parts = yy_.yytext.match(/([a-zA-Z]+)(\d+)?/);
				var rtype = null, side = null;
				if (parts) {
					rtype = parts[1];
          if (parts.length >= 3){
						side = parts[2];
					}
				}

        var sub = null;
        if (substParts) {
           sub = Array(0);
           for (const s of substParts){
				       sub.push(s.split('/'));
           }
        }
				yy_.yytext = [name, rtype, side, lineranges, sub];
				return 39;
				
break;
case 10:return 19;
break;
case 11:return 21;
break;
case 12:return 35;
break;
case 13:return 36;
break;
case 14:return 34;
break;
case 15:return 17;
break;
case 16:return 38;
break;
case 17:return 20;
break;
case 18:
				// remaining DEBOXes implied by EOF
				var tokens = [];

				while (this._iemitstack[0]) {
					tokens.unshift("DEBOX");
					this._iemitstack.shift();
				}
				tokens.unshift("ENDOFFILE");
				if (tokens.length) return tokens;
				
break;
case 19: /* manually close an assumption box */
				this._log("MANUAL DEBOX");
				this._iemitstack.shift();
				return ['DEBOX', 'EOL'];
				
break;
case 20:/* eat blank lines */
break;
case 21:
				/* Similar to the idea of semantic whitespace, we keep track of virtual
				 * BOX/DEBOX characters based on a stack of | occurrences
				 */
				    var indentation = (yy_.yytext.match(/\|/g)||[]).length;
				    if (indentation > this._iemitstack[0]) {
					this._iemitstack.unshift(indentation);
					this._log(this.topState(), "BOX", this.stateStackSize());
					this.myBegin(this.topState(), 'deepening, due to indent'); // deepen our current state
					return ['BOX', 'EOL'];
				    }

				    var tokens = ["EOL"];
				    while (indentation < this._iemitstack[0]) {
					this.myPopState();
					this._log(this.topState(), "DEBOX", this.stateStackSize());
					tokens.push("DEBOX");
					this._iemitstack.shift();
				    }
				    if (tokens[tokens.length-1] === "DEBOX")
					    tokens.push("EOL");
				    return tokens;
				
break;
case 22:return 8; 
break;
case 23:/* ignore whitespace */
break;
case 24:return 2;
break;
}
},
rules: [/^(?:[\n\r]?#.*)/,/^(?:and|∧|&)/,/^(?:or|∨|v|\+)/,/^(?:implies|->|→)/,/^(?:iff|<->)/,/^(?:not|~|¬)/,/^(?:=)/,/^(?:with\b)/,/^(?:\d+)/,/^(?:(:.*))/,/^(?:E|∃)/,/^(?:A|∀)/,/^(?:\()/,/^(?:\))/,/^(?:_\|_|⊥)/,/^(?:([a-zA-Z_][a-zA-Z_'"0-9\|]*))/,/^(?:,)/,/^(?:\.)/,/^(?:[\n\r]*$)/,/^(?:\n([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\|*-+)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n|^]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\d*([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*\|*)/,/^(?:\n)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/,/^(?:.*)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],"inclusive":true}}
});
jisonLexerFn = lexer.setInput;
lexer.setInput = function(input) {
        var debug = false;
        this._iemitstack = [0];
        this._log = function() { if (debug) console.log.apply(this, arguments); };
        this.myBegin = function(state, why) { this._log("Begin " + state + " because " + why); this.begin(state); };
        this.myPopState = function() { this._log("Popping " + this.popState() + " to " + this.topState()); };
        return jisonLexerFn.call(this, input);
};;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
}).call(this)}).call(this,require('_process'))
},{"_process":4,"fs":2,"path":3}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
(function (process){(function (){
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

function assertPath(path) {
  if (typeof path !== 'string') {
    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
  }
}

// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
  var res = '';
  var lastSegmentLength = 0;
  var lastSlash = -1;
  var dots = 0;
  var code;
  for (var i = 0; i <= path.length; ++i) {
    if (i < path.length)
      code = path.charCodeAt(i);
    else if (code === 47 /*/*/)
      break;
    else
      code = 47 /*/*/;
    if (code === 47 /*/*/) {
      if (lastSlash === i - 1 || dots === 1) {
        // NOOP
      } else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
          if (res.length > 2) {
            var lastSlashIndex = res.lastIndexOf('/');
            if (lastSlashIndex !== res.length - 1) {
              if (lastSlashIndex === -1) {
                res = '';
                lastSegmentLength = 0;
              } else {
                res = res.slice(0, lastSlashIndex);
                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
              }
              lastSlash = i;
              dots = 0;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = '';
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += '/..';
          else
            res = '..';
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += '/' + path.slice(lastSlash + 1, i);
        else
          res = path.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === 46 /*.*/ && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

function _format(sep, pathObject) {
  var dir = pathObject.dir || pathObject.root;
  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
  if (!dir) {
    return base;
  }
  if (dir === pathObject.root) {
    return dir + base;
  }
  return dir + sep + base;
}

var posix = {
  // path.resolve([from ...], to)
  resolve: function resolve() {
    var resolvedPath = '';
    var resolvedAbsolute = false;
    var cwd;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path;
      if (i >= 0)
        path = arguments[i];
      else {
        if (cwd === undefined)
          cwd = process.cwd();
        path = cwd;
      }

      assertPath(path);

      // Skip empty entries
      if (path.length === 0) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

    if (resolvedAbsolute) {
      if (resolvedPath.length > 0)
        return '/' + resolvedPath;
      else
        return '/';
    } else if (resolvedPath.length > 0) {
      return resolvedPath;
    } else {
      return '.';
    }
  },

  normalize: function normalize(path) {
    assertPath(path);

    if (path.length === 0) return '.';

    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

    // Normalize the path
    path = normalizeStringPosix(path, !isAbsolute);

    if (path.length === 0 && !isAbsolute) path = '.';
    if (path.length > 0 && trailingSeparator) path += '/';

    if (isAbsolute) return '/' + path;
    return path;
  },

  isAbsolute: function isAbsolute(path) {
    assertPath(path);
    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
  },

  join: function join() {
    if (arguments.length === 0)
      return '.';
    var joined;
    for (var i = 0; i < arguments.length; ++i) {
      var arg = arguments[i];
      assertPath(arg);
      if (arg.length > 0) {
        if (joined === undefined)
          joined = arg;
        else
          joined += '/' + arg;
      }
    }
    if (joined === undefined)
      return '.';
    return posix.normalize(joined);
  },

  relative: function relative(from, to) {
    assertPath(from);
    assertPath(to);

    if (from === to) return '';

    from = posix.resolve(from);
    to = posix.resolve(to);

    if (from === to) return '';

    // Trim any leading backslashes
    var fromStart = 1;
    for (; fromStart < from.length; ++fromStart) {
      if (from.charCodeAt(fromStart) !== 47 /*/*/)
        break;
    }
    var fromEnd = from.length;
    var fromLen = fromEnd - fromStart;

    // Trim any leading backslashes
    var toStart = 1;
    for (; toStart < to.length; ++toStart) {
      if (to.charCodeAt(toStart) !== 47 /*/*/)
        break;
    }
    var toEnd = to.length;
    var toLen = toEnd - toStart;

    // Compare paths to find the longest common path from root
    var length = fromLen < toLen ? fromLen : toLen;
    var lastCommonSep = -1;
    var i = 0;
    for (; i <= length; ++i) {
      if (i === length) {
        if (toLen > length) {
          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
            // We get here if `from` is the exact base path for `to`.
            // For example: from='/foo/bar'; to='/foo/bar/baz'
            return to.slice(toStart + i + 1);
          } else if (i === 0) {
            // We get here if `from` is the root
            // For example: from='/'; to='/foo'
            return to.slice(toStart + i);
          }
        } else if (fromLen > length) {
          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
            // We get here if `to` is the exact base path for `from`.
            // For example: from='/foo/bar/baz'; to='/foo/bar'
            lastCommonSep = i;
          } else if (i === 0) {
            // We get here if `to` is the root.
            // For example: from='/foo'; to='/'
            lastCommonSep = 0;
          }
        }
        break;
      }
      var fromCode = from.charCodeAt(fromStart + i);
      var toCode = to.charCodeAt(toStart + i);
      if (fromCode !== toCode)
        break;
      else if (fromCode === 47 /*/*/)
        lastCommonSep = i;
    }

    var out = '';
    // Generate the relative path based on the path difference between `to`
    // and `from`
    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
        if (out.length === 0)
          out += '..';
        else
          out += '/..';
      }
    }

    // Lastly, append the rest of the destination (`to`) path that comes after
    // the common path parts
    if (out.length > 0)
      return out + to.slice(toStart + lastCommonSep);
    else {
      toStart += lastCommonSep;
      if (to.charCodeAt(toStart) === 47 /*/*/)
        ++toStart;
      return to.slice(toStart);
    }
  },

  _makeLong: function _makeLong(path) {
    return path;
  },

  dirname: function dirname(path) {
    assertPath(path);
    if (path.length === 0) return '.';
    var code = path.charCodeAt(0);
    var hasRoot = code === 47 /*/*/;
    var end = -1;
    var matchedSlash = true;
    for (var i = path.length - 1; i >= 1; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else {
        // We saw the first non-path separator
        matchedSlash = false;
      }
    }

    if (end === -1) return hasRoot ? '/' : '.';
    if (hasRoot && end === 1) return '//';
    return path.slice(0, end);
  },

  basename: function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
    assertPath(path);

    var start = 0;
    var end = -1;
    var matchedSlash = true;
    var i;

    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
      if (ext.length === path.length && ext === path) return '';
      var extIdx = ext.length - 1;
      var firstNonSlashEnd = -1;
      for (i = path.length - 1; i >= 0; --i) {
        var code = path.charCodeAt(i);
        if (code === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else {
          if (firstNonSlashEnd === -1) {
            // We saw the first non-path separator, remember this index in case
            // we need it if the extension ends up not matching
            matchedSlash = false;
            firstNonSlashEnd = i + 1;
          }
          if (extIdx >= 0) {
            // Try to match the explicit extension
            if (code === ext.charCodeAt(extIdx)) {
              if (--extIdx === -1) {
                // We matched the extension, so mark this as the end of our path
                // component
                end = i;
              }
            } else {
              // Extension does not match, so our result is the entire path
              // component
              extIdx = -1;
              end = firstNonSlashEnd;
            }
          }
        }
      }

      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
      return path.slice(start, end);
    } else {
      for (i = path.length - 1; i >= 0; --i) {
        if (path.charCodeAt(i) === 47 /*/*/) {
            // If we reached a path separator that was not part of a set of path
            // separators at the end of the string, stop now
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else if (end === -1) {
          // We saw the first non-path separator, mark this as the end of our
          // path component
          matchedSlash = false;
          end = i + 1;
        }
      }

      if (end === -1) return '';
      return path.slice(start, end);
    }
  },

  extname: function extname(path) {
    assertPath(path);
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;
    for (var i = path.length - 1; i >= 0; --i) {
      var code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1)
            startDot = i;
          else if (preDotState !== 1)
            preDotState = 1;
      } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
        // We saw a non-dot character immediately before the dot
        preDotState === 0 ||
        // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return '';
    }
    return path.slice(startDot, end);
  },

  format: function format(pathObject) {
    if (pathObject === null || typeof pathObject !== 'object') {
      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
    }
    return _format('/', pathObject);
  },

  parse: function parse(path) {
    assertPath(path);

    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
    if (path.length === 0) return ret;
    var code = path.charCodeAt(0);
    var isAbsolute = code === 47 /*/*/;
    var start;
    if (isAbsolute) {
      ret.root = '/';
      start = 1;
    } else {
      start = 0;
    }
    var startDot = -1;
    var startPart = 0;
    var end = -1;
    var matchedSlash = true;
    var i = path.length - 1;

    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find
    var preDotState = 0;

    // Get non-dir info
    for (; i >= start; --i) {
      code = path.charCodeAt(i);
      if (code === 47 /*/*/) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
      if (end === -1) {
        // We saw the first non-path separator, mark this as the end of our
        // extension
        matchedSlash = false;
        end = i + 1;
      }
      if (code === 46 /*.*/) {
          // If this is our first dot, mark it as the start of our extension
          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension
        preDotState = -1;
      }
    }

    if (startDot === -1 || end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      if (end !== -1) {
        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
      }
    } else {
      if (startPart === 0 && isAbsolute) {
        ret.name = path.slice(1, startDot);
        ret.base = path.slice(1, end);
      } else {
        ret.name = path.slice(startPart, startDot);
        ret.base = path.slice(startPart, end);
      }
      ret.ext = path.slice(startDot, end);
    }

    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

    return ret;
  },

  sep: '/',
  delimiter: ':',
  win32: null,
  posix: null
};

posix.posix = posix;

module.exports = posix;

}).call(this)}).call(this,require('_process'))
},{"_process":4}],4:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],5:[function(require,module,exports){
var u = require("./util");
var p = require("../folproof-parser");

var Justifier = function Justifier(format, fn) {
	// format = { hasPart : (true/false), stepRefs : ("num" | "range")*, subst : (true/false) };
	var self = this;

	this.exec = function(proof, step, part, steps, subst) {
		u.debug("Justifier", step, part, steps, subst);
		var checked = self.checkParams(step, part, steps, subst);
		if (typeof checked === "string") return checked;
    u.debug("Calling justifier on checked", checked);
		return fn(proof, step, checked[0], checked[1], checked[2]);
	};

	this.checkParams = function checkParams(curStep, part, steps, subst) {
		if (format === null) {
			if (part != null) 
				return "Step part (e.g., 2 in 'and e2') not applicable, in this context.";
			if (steps != null)
				return "Step references not applicable.";
			if (subst != null)
				return "Substitutions not applicable.";
			return [];
		}

		var partNum = null, refNums = [], parsedSubst = null;
		if (format.hasPart) {
			partNum = parseInt(part);
			if (!(partNum == 1 || partNum == 2))
				return "Part number must be 1 or 2";
		} else
			if (part != null)
				return "Step part (e.g., 2 in 'and e2') not applicable, in this context.";
		
		if (format.stepRefs) {
      var refStepFormat;
      if (format.stepRefs.length > 0 & format.stepRefs[format.stepRefs.length - 1] == "nums") {
        refStepFormat = format.stepRefs.slice(0, -1);
        var extraSteps = steps.length - refStepFormat.length;
        if (extraSteps > 0) {
          refStepFormat = refStepFormat.concat(Array(extraSteps).fill("num"));
        }
      } else {
        refStepFormat = format.stepRefs;
      }
			if (steps.length != refStepFormat.length) {
				var f = refStepFormat.map(function(e) { return e == "num" ? "n" : "n-m" });
				return "Step reference mismatch; required format: " + f.join(", ") + ".";
			}
			for (var i=0; i<steps.length; i++) {
				if (refStepFormat[i] == "num") {
					var n = parseInt(steps[i]) - 1;
					if (!(n >= 0 && n < curStep))
						return "Step reference #" + (i + 1) + " must be 1 <= step < current.";
					refNums.push(n);
				} else {
					var ab = steps[i].split("-");
					if (ab.length != 2)
						return "Step reference # " + (i + 1) + " must be range, a-b, with a <= b.";
					
					ab = [parseInt(ab[0]) - 1, parseInt(ab[1]) - 1];
					if (ab[0] > ab[1] || Math.max(ab[0], ab[1]) >= curStep)
						return "Step reference # " + (i + 1) + " must be range, a-b, with a <= b.";
					refNums.push(ab);
				}
			}
		} else {
			if (steps != null)
				return "Step references not applicable, here.";
		}
		
		if (format.subst) {
			if (!subst)
				return "Substitution specification required (e.g., A.x/x0 intro n-m)";
      var parsedSubst = subst.map(parseSubst);
      var error = parsedSubst.find((x) => typeof x == "string");
      if (error)
        return error;
			// w = subst.map(function(e) { return e.match("^[A-Za-z_][A-Za-z_0-9]*$"); });
			// var allValidIds = w.reduce(function(a, e) { return a && e && e.length == 1 && e[0] });
			// if (w.length != 2 || !allValidIds)
			// 	return "Substitution format must match (e.g., A.x/x0 intro n-m.)";

			// w = w.map(function(e) { return e[0] });
      u.debug("subst", subst, "parsedSubst", parsedSubst);
		} else {
			if (subst)
				return "Substitution unexpected.";
		}

		return [partNum, refNums, parsedSubst];
	};
};

var parseSubst = function(subst){
  if (subst.length != 2)
		return "Substitution must consist of a variable and a term (e.g., x/f(c))";
  var idRegex = "^[A-Za-z_][A-Za-z_0-9]*$";
  var res = subst[0].match(idRegex);
  if (!res)
    return "Substitution must substitute for a variable, but got " + subst[0] + ".";
  var substAst = p.parser.parse(subst[1]);
  if (typeof substAst === "string"){
    return substAst;
  } else {
    // the AST will be of the form [["rule", term, ...]], as the top-level parser is "proof"
    var term = substAst[0][1];
    // The term cannot be a formula, hence it must have an identifier at the root
    if (term[0] == "id"){
      return [res[0], term];
    } else {
      return "Substitution does not have a valid term, should be of the form x/f(c), but got " + subst[1] + ".";
    }
  }
};

module.exports = Justifier;

},{"../folproof-parser":1,"./util":8}],6:[function(require,module,exports){
var Rule = function Rule(options) {
	// { name : name,
	//   type : ["simple", "derived", "normal"], 
	//   verifier : new Verifier(parseFormat, function(proof, step) {}),
	//   introduction : new Verifier(parseFormat, function(proof, step, part, steps, subst) {}),
	//   elimination : new Verifier(parseFormat, function(proof, step, part, steps, subst) {})
	// }
	this.getName = function getName() { return options.name; };
	this.getType = function getType() { return options.type; };
	this.getSimpleVerifier = function getSimpleVerifier() { return options.verifier || null; };
	this.getIntroVerifier = function getIntroVerifier() { return options.introduction || null; };
	this.getElimVerifier = function getElimVerifier() { return options.elimination || null; };
};

module.exports = Rule;

},{}],7:[function(require,module,exports){
var u = require("./util");
var Rule = require("./rule.js");
var Justifier = require("./justifier.js");

var rules = {
	"premise" : new Rule({
		name : "Premise",
		type : "simple",
		verifier : new Justifier(null, function(proof, step) { return true; })
		}),
	"sorry" : new Rule({
		name : "Sorry",
		type : "simple",
		verifier : new Justifier(null, function(proof, step) { return true; })
		}),
	"assumption" : new Rule({
		name : "Assumption",
		type : "simple",
		verifier : new Justifier(null, function(proof, step) {
				if (proof.steps[step].isFirstStmt())
					return true;
				return "Assumptions can only be made at the start of an assumption box.";
			})
		}),
	"lem" : new Rule({
		name : "LEM",
		type : "derived",
		verifier : new Justifier(null, function(proof, step) {
			var s = proof.steps[step].getSentence();
			if (s[0] !== "or")
				return "LEM: must be phi or not phi.";
			var left = s[1], right = s[2];
			if (right[0] !== "not" || !semanticEq(left, right[1]))
				return "LEM: right side must be negation of left.";
			
			return true;
		})
	}),
	"copy" : new Rule({
		name : "COPY",
		type : "derived",
		verifier : new Justifier({stepRefs:["num"]},
			function(proof, step, part, steps) {
				var curStep = proof.steps[step].getSentence();
				var refStep = proof.steps[steps[0]].getSentence();
				if (!semanticEq(curStep, refStep))
					return "Copy: Current step is not semantically equal to the referenced step.";
				return true;
			}
		)
	}),
	"mt" : new Rule({
		name : "MT",
		type : "derived",
		verifier : new Justifier({stepRefs:["num","num"]},
			function(proof, step, part, steps) {
			var impStep = proof.steps[steps[0]].getSentence();
			if (impStep[0] !== "->")
				return "MT: 1st referenced step must be implication.";
			var left = impStep[1], right = impStep[2];
			var negStep = proof.steps[steps[1]].getSentence();
			if (negStep[0] !== "not" || !semanticEq(negStep[1], right))
				return "MT: 2nd ref step must be negation of right side of 1st ref step.";
			
			var s = proof.steps[step].getSentence();
			if (s[0] !== 'not' || !semanticEq(left, s[1]))
				return "MT: current step must be negation of left side of ref step.";
			
			return true;
		})
	}),
	"contra" : new Rule({
		name : "Contra",
		type : "derived",
		verifier : new Justifier(
		{ hasPart : false, stepRefs : ["range"], subst : false },
		function(proof, step, part, steps) {	
			var assumptionExpr = proof.steps[steps[0][0]].getSentence();
			var contraExpr = proof.steps[steps[0][1]].getSentence();
			if (! isContradiction(contraExpr)) {
			return "Contra: Final step in range must be a contradiction.";
			}
	
			if (assumptionExpr[0] !== 'not')
			return "Contra: Assumption is not a negation. Might you be thinking of not-introduction?";
		
			var semEq = semanticEq(assumptionExpr[1], proof.steps[step].getSentence());
			if (semEq)
			return true;

			return "Contra: Negation of assumption doesn't match current step.";
		})
		}),
	"bot" : new Rule({
			name : "Absurdity",
			type : "normal",
			elimination : new Justifier(
				{ hasPart : false, stepRefs : ["num"], subst : false },
				function(proof, step, part, steps) {
				var refStep = proof.steps[steps[0]].getSentence();
        if (!isContradiction(refStep))
					// if (refStep[0] != 'id' || (refStep[1] != 'contradiction' && refStep[1] != '_|_'))
						return "Bot-elim: Referenced step is not absurdity.";
					return true;
				})
		}),
	"notnot" : new Rule({
			name : "Double-negation",
			type : "normal",
			elimination : new Justifier(
				{ hasPart : false, stepRefs : ["num"], subst : false },
				function(proof, step, part, steps) {
					var curStep = proof.steps[step].getSentence();
					var refStep = proof.steps[steps[0]].getSentence();
					if (refStep[0] !== 'not' || refStep[1][0] !== 'not')
						return "Notnot-elim: Referenced step is not a double-negation.";
					
					if (!semanticEq(refStep[1][1], curStep))
						return "Notnot-elim: Does not result in current step.";

					return true;
				})
		}),
	"->" : new Rule({
		name : "Implication",
		type : "normal",
		introduction : new Justifier(
			{ hasPart : false, stepRefs : ["range"], subst : false },
			function(proof, step, part, steps) {	
			var truth = proof.steps[steps[0][0]].getSentence();
			var result = proof.steps[steps[0][1]].getSentence();
			var implies = proof.steps[step].getSentence();
			if (implies[0] != '->')
			return "Implies-Intro: Current step is not an implication";

			var truthSemEq = semanticEq(implies[1], truth);
			if (! truthSemEq)
			return "Implies-Intro: The left side does not match the assumption.";

			var resultSemEq = semanticEq(implies[2], result);
			if (! resultSemEq)
			return "Implies-Intro: The result does not match the right side.";
	
			return true;
			}
		),
		elimination : new Justifier(
			{ hasPart : false, stepRefs : ["num", "num"], subst : false },
			function(proof, step, part, steps) {
			var truthStep = steps[1], impliesStep = steps[0];
			if (truthStep >= step || impliesStep >= step)
			return "Implies-Elim: Referenced proof steps must precede current step.";

			var truth = proof.steps[truthStep].getSentence();
			var implies = proof.steps[impliesStep].getSentence();
			if (implies[0] != '->')
			return "Implies-Elim: Step " + steps[0] + " is not an implication";
			var truthSemEq = semanticEq(implies[1], truth);
			var resultSemEq = semanticEq(implies[2], proof.steps[step].getSentence());
			if (truthSemEq) {
			if (resultSemEq) {
				return true;
			} else {
				return "Implies-Elim: The left side does not imply this result.";
			}
			}
		
			return "Implies-Elim: The implication's left side does not match the referenced step.";
			}
		)
		}),	
	"and" : new Rule({
		name : "And",
		type : "normal",
		introduction : new Justifier(
			{ stepRefs : ["num", "num"] },
			function(proof, step, part, steps) {
				var s = proof.steps[step].getSentence();
				if (s[0] !== 'and')
					return "And-Intro: Current step is not an 'and'-expression." + proof.steps[step].getSentence();

				if (semanticEq(s[1], proof.steps[steps[0]].getSentence())) {
					if (semanticEq(s[2], proof.steps[steps[1]].getSentence())) {
						return true;
					} else {
						return "And-Intro: Right side doesn't match referenced step.";
					}
				}
		
				return "And-Intro: Left side doesn't match referenced step.";
			}),
		elimination : new Justifier(
			{ hasPart: true, stepRefs: ["num"] },
			function(proof, step, part, steps) {
				var andExp = proof.steps[steps[0]].getSentence();
				if (andExp[0] != 'and')
					return "And-Elim: Referenced step is not an 'and' expression.";

				var semEq = semanticEq(andExp[part], proof.steps[step].getSentence());

				if (semEq)
					return true;

				return "And-Elim: In referenced line, side " + part + " does not match current step.";
			})
	}),
	"or" : new Rule({
		name : "Or",
		type : "normal",
		introduction : new Justifier(
			{ hasPart: true, stepRefs: ["num"] },
			function(proof, step, part, steps) {
				var s = proof.steps[step].getSentence();
				if (s[0] !== 'or')
					return "Or-Intro: Current step is not an 'or'-expression.";

				if (semanticEq(s[part], proof.steps[steps[0]].getSentence()))
				return true;

				return "Or-Intro: Side " + part + " doesn't match referenced step.";
			}),
		elimination : new Justifier(
			{ stepRefs : ["num", "range", "range"] },
			function(proof, step, part, steps) {
				var currStepExpr = proof.steps[step].getSentence();
				var orStepExpr = proof.steps[steps[0]].getSentence();
				var a1p1Expr = proof.steps[steps[1][0]].getSentence();
				var a1p2Expr = proof.steps[steps[1][1]].getSentence();
				var a2p1Expr = proof.steps[steps[2][0]].getSentence();
				var a2p2Expr = proof.steps[steps[2][1]].getSentence();
		
				// and through the gauntlet...
				if (orStepExpr[0] !== 'or')
					return "Or-Elim: First referenced step is not an 'or'-expression.";
				if (!semanticEq(orStepExpr[1], a1p1Expr))
					return "Or-Elim: First range intro doesn't match left side of 'or'.";
				if (!semanticEq(orStepExpr[2], a2p1Expr))
					return "Or-Elim: Second range range intro doesn't match right side of 'or'.";
				if (!semanticEq(a1p2Expr, a2p2Expr))
					return "Or-Elim: Step range conclusions don't match.";
				if (!semanticEq(a1p2Expr, currStepExpr))
					return "Or-Elim: Current step doesn't match step range conclusions.";

				return true;
			})
	}),
	"neg" : new Rule({
		name : "Neg",
		type : "normal",
		introduction : new Justifier(
			{ stepRefs: ["range"] },
			function(proof, step, part, steps) {
				var assumptionExpr = proof.steps[steps[0][0]].getSentence();
				var contraExpr = proof.steps[steps[0][1]].getSentence();
				if (! isContradiction(contraExpr)) {
					return "Neg-Intro: Final step in range must be absurdity.";
				}
				var curStep = proof.steps[step].getSentence();
				if (curStep[0] !== 'not') {
					return "Neg-Intro: Current step is not a negation. Might you be thinking of Contra?";
				} else {
					var semEq = semanticEq(assumptionExpr, curStep[1]);
					if (semEq)
						return true;

					return "Neg-Intro: Negation of assumption doesn't match current step.";
				}
			}),
		elimination : new Justifier(
			{ stepRefs: ["num", "num"] },
			function(proof, step, part, steps) {
				var s = proof.steps[step].getSentence();

				var step1expr = proof.steps[steps[0]].getSentence();
				var step2expr = proof.steps[steps[1]].getSentence();
				var semEq;
				if (step1expr[0] === 'not') {
					semEq = semanticEq(step1expr[1], step2expr);
				} else if (step2expr[0] === 'not') {
					semEq = semanticEq(step2expr[1], step1expr);
				} else {
					return "Neg-Elim: Neither referenced proof step is a 'not' expression.";
				}

				if (semEq) return true;
		
				return "Neg-Elim: Subexpression in not-expr does not match other expr.";
			})
	}),
 	"a" : new Rule({
		name : "ForAll",
		type : "normal",
		introduction : new Justifier(
			{ stepRefs : ["range"], subst : true },
			function(proof, step, part, steps, subst) {
				var currStep = proof.steps[step];
				var currExpr = currStep.getSentence();
				var startStep = proof.steps[steps[0][0]];
				var startExpr = startStep.getSentence();
				var scope = startStep.getScope(); // ex: [['x0','x'], ['y0', 'y'], ...], LIFO
				var endExpr = proof.steps[steps[0][1]].getSentence();
        u.debug("all-intro", "startExpr", startExpr, "endExpr", endExpr, "currExpr", currExpr, "scope", scope, "subst", subst);
				if (currExpr[0] !== 'forall')
					return "All-x-Intro: Current step is not a 'for-all' expression.";
				if (scope.length == 0 || scope[scope.length - 1] == null)
					return "All-x-Intro: Not valid without a scoping assumption (e.g., an x0 box).";
        if (subst.length > 1)
          return "All-x-intro: Introducing more than one quantifier at the same time is currently not supported";

				// check if any substitutions from our scope match refExpr
				var scopeVar = scope[scope.length-1];
				var found = scope.slice().reverse().reduce(function(a,e) { return a || (e == null || e == subst[1]); }, true);
				if (! found)
					return "All-x-intro: Substitution " + subst[1] + " doesn't match scope: " + scope.filter(function(e) { if (e != null) return e; }).join(", ");

				var currExprSub = substitute(currExpr[2], subst);
				if (semanticEq(endExpr, currExprSub))
					return true;
				return "All-x-Intro: Last step in range doesn't match current step after " + subst[0] + "/" + subst[1] + ".";
			}),
		elimination : new Justifier(
			{ stepRefs : ["num"], subst: true },
			function(proof, step, part, steps, subst) {
				var currStep = proof.steps[step];
				var currExpr = currStep.getSentence();
				var refExpr = proof.steps[steps[0]].getSentence();
        u.debug("all-elim", "refExpr", refExpr, "currExpr", currExpr, "subst", subst);
				if (refExpr[0] !== 'forall')
					return "All-x-Elim: Referenced step is not a for-all expression.";
        if (subst.length > 1)
          return "All-x-elim: Eliminating more than one quantifier at the same time is currently not supported";

				var refExprSub = substitute(refExpr[2], subst);
				if (semanticEq(refExprSub, currExpr))
					return true;

				return "All-x-Elim: Referenced step did not match current step after " + subst[1] + "/" + subst[0] + ".";
			})
	}),
	"e" : new Rule({
		name : "Exists",
		type : "normal",
		introduction : new Justifier(
			{ stepRefs: ["num"], subst: true },
			function(proof, step, part, steps, subst) {
				var currStep = proof.steps[step];
				var currExpr = currStep.getSentence();
				var refExpr = proof.steps[steps[0]].getSentence();
        u.debug("ex-intro", "refExpr", refExpr, "currExpr", currExpr, "subst", subst);
				if (currExpr[0] !== 'exists')
					return "Exists-x-Intro: Current step is not an 'exists' expression.";
        if (subst.length > 1)
          return "Exists-x-Intro: Introducing more than one quantifier at the same time is currently not supported";

				var currExprSub = substitute(currExpr[2], subst);
				if (semanticEq(refExpr, currExprSub))
					return true;
	
				return "Exists-x-Intro: Referenced step did not match current step after " + subst[1] + "/" + subst[0] + " substitution.";
			}),
		elimination : new Justifier(
			{ stepRefs: ["num", "range"], subst: true },
			function(proof, step, part, steps, subst) {
				var currStep = proof.steps[step];
				var currExpr = currStep.getSentence();
				var refExpr = proof.steps[steps[0]].getSentence();
				var startStep = proof.steps[steps[1][0]];
				var startExpr = startStep.getSentence();
				var scope = startStep.getScope(); // ex: [['x0','x'], ['y0', 'y'], ...], LIFO
				var endExpr = proof.steps[steps[1][1]].getSentence();
				if (refExpr[0] !== 'exists')
					return "Exists-x-Elim: Referenced step is not an 'exists' expression.";
				if (scope.length == 0 || scope[scope.length - 1] == null)
					return "Exists-x-Elim: Range must be within an assumption scope (e.g., an x0 box).";
        if (subst.length > 1)
          return "Exists-x-Elim: Eliminating more than one quantifier at the same time is currently not supported";

				// check whether substition matches ref line with current line
				var scopeVars = scope[scope.length-1];
				var refExprSub = substitute(refExpr[2], subst);
				if (semanticEq(refExprSub, startExpr)) {
					if (semanticEq(endExpr, currExpr))
						return true;
					return "Exists-x-Elim: assumption ending step does not match current step.";
				}
				return "Exists-x-Elim: assumption beginning step doesn't match ref step for " + scopeVars[0] + ".";
			})
	}),	
  "b" : new Rule({
    name : "Backchaining",
    type : "derived",
    verifier : new Justifier(
      { stepRefs : ["num", "nums"], subst: true },
      function(proof, step, part, steps, subst) {
        var currStep = proof.steps[step];
        var currExpr = currStep.getSentence();
        var refExpr = steps.map((k) => proof.steps[k].getSentence());
        u.debug("backchaining", "steps", steps, "refExpr", refExpr, "currExpr", currExpr, "subst", subst);
        var clause = openHornClause(refExpr[0]);
        if (typeof clause === "string")
          return "Backchaining: " + clause;

        var vars = clause[0];
        var headSub = clause[1].map((c) => substitute(c, subst));
        var tailSub = substitute(clause[2], subst);
        u.debug("backchaining", "headSub", headSub, "tailSub", tailSub);
        if (semanticEq(tailSub, currExpr)){
          for(let i = 0; i < headSub.length; i++){
            if(!semanticEq(headSub[i], refExpr[i + 1])){
              return "Backchaining: Head formula " + (i + 1) + " of Horn clause in step " + (steps[0] + 1) + " does not match step " + (steps[i + 1] + 1) + ".";
            }
          }
          return true;
        } else {
          return "Backchaining: Tail of Horn clause in step " + (steps[0] + 1) + " does not match current step."
        }
      })
  }),
	"=" : new Rule({
		name : "Equality",
		type : "normal",
		introduction : new Justifier(
			{ /* no params required */ },
			function(proof, step, part, steps) {
				var s = proof.steps[step].getSentence();
				if (s[0] !== '=')
					return "Equality-Intro: Current step is not an equality." + proof.steps[step].getSentence();

				if (semanticEq(s[1], s[2]))
					return true;
		
				return "Equality-Intro: Left and right sides do not match.";
			}),
		elimination : new Justifier(
			{ stepRefs: ["num", "num"] },
			function(proof, step, part, steps) {
				var equalityExpr = proof.steps[steps[0]].getSentence();
				var elimExpr = proof.steps[steps[1]].getSentence();
				var proposedResult = proof.steps[step].getSentence();
				if (equalityExpr[0] !== '=')
					return "Equality-Elim: First referenced step is not an equality.";
					
				if (!semanticEq(elimExpr, proposedResult, equalityExpr[1], equalityExpr[2]))
					return "Equality-Elim: Does not result in current step.";

				return true;
			})
	}),
};

// Substitutes in parallel in expr by all the variables that are mapped in subst
function substitute(expr, subst, bound) {
	u.debug("substitute", expr, subst);
	bound = bound ? bound : [];
	var binOps = ["->", "and", "or", "<->", "="];
	var unOps = ["not", "forall", "exists"];

	// remove parens, which are basically stylistic no-ops
	while (expr[0] === 'paren') expr = expr[1];

	if (arrayContains(binOps, expr[0])) {
		var leftSide = substitute(expr[1], subst);
		var rightSide = substitute(expr[2], subst);
		return [expr[0], leftSide, rightSide];
	} else if (arrayContains(unOps, expr[0])) {
		if (expr[0] === "forall" || expr[0] === "exists") {
			bound = bound.slice(0);
			bound.push(expr[1]);
			return [expr[0], expr[1],
				substitute(expr[2], subst, bound)];
		}
		return [expr[0], substitute(expr[1], subst, bound)];
	} else if (expr[0] === 'id') {
		if (expr.length === 2) {
			if (! arrayContains(bound, expr[1])) {
        var s = subst.find((s) => s[0] === expr[1]);
				if (s)
					return s[1]; // [expr[0], b];
			}
			return expr;
		}
		if (expr.length === 3) {
			var newTerms = [];
			for (var i=0; i<expr[2].length; i++) {
				newTerms.push(substitute(expr[2][i], subst, bound));
			}
			return [expr[0], expr[1], newTerms];
		}
		throw Error("Unexpected AST format.");
	}
}

/**
 * Determines whether two expressions are semantically equivalent
 * under the given (and optional) substitution.
 * a, b - abstract syntax trees of the expressions to be compared.
 * suba, subb (optional) - does comparison after substituting suba in a with subb.
 */
function semanticEq(A, B, suba, subb) {
	u.debug("semanticEq", A, B);
	var bound = {}, sub;
	if (suba) {
		sub = true;
		return _rec(A, B, {});
	} else {
		sub = false;
		return _rec(A, B);
	}

	function _rec(a, b, bound) {
		var binOps = ["->", "and", "or", "<->", "="];
		var unOps = ["not"];

		// if eq w/substitution, return true, otherwise continue
		if (sub && semanticEq(a, suba)) {
				if ((a[0] !== 'id' || !bound[a[1]]) && _rec(subb, b, bound)) return true;
		}

		if (arrayContains(binOps, a[0]) && a[0] === b[0]) {
			if (_rec(a[1], b[1], bound) && _rec(a[2], b[2], bound)) {
				return true;
			}
			return false;
		} else if (arrayContains(unOps, a[0]) && a[0] === b[0]) {
			if (_rec(a[1], b[1], bound)) {
				return true;
			}
			return false;
		} else if (a[0] === 'exists' || a[0] === 'forall' && a[0] === b[0]) {
			var newb;
			if (sub) {
				newb = clone(bound);
				newb[a[1]] = true;
			}
			if (_rec(a[2], b[2], newb)) {
				return true;
			}
			return false;
    } else if (a[0] === "bot"){
        return b[0] === "bot";
		} else if (a[0] === "id") {
			if (b && a[1] !== b[1]) return false;
			if (a.length == 2 && b.length == 2) {
				return true;
			}

			if (a.length == 3 && b.length == 3) {
				if (a[2].length != b[2].length) {
					return false;
				}
				for (var i=0; i<a[2].length; i++) {
					if (!_rec(a[2][i], b[2][i], bound)) {
						return false;
					}
				}
				return true;
			}
		}
		return false;
	}
}

function isContradiction(s) {
	  // return (s[0] === 'id' && (s[1] === '_|_' || s[1] === 'contradiction'));
    return s[0] == 'bot';
}

function splitHead(form) {
  if (form[0] == "id") {
    return [form];
  }
  else if (form[0] == "and") {
    var l = splitHead(form[1]);
    var r = splitHead(form[2]);
    if (l && r) {
      return l.concat(r);
    } else {
      return null;
    }
  }
  else {
    return null;
  }
}

function openHornClause(form, vars = Array(0)){
  u.debug("openHornClause", form, vars);
  if (form[0] == "forall"){
    return openHornClause(form[2], vars.concat([form[1]]));
  }
  else if (form[0] == "->"){
    var h = splitHead(form[1]);
    if (h){
      return [vars, h, form[2]];
    } else {
      return "Not a valid head in Horn clause";
    }
  }
  else if (form[0] == "id"){
    return [vars, [], form];
  }
  else {
    return "Not a valid Horn clause with top-level connective " + form[0];
  }
}

function arrayContains(arr, el) {
	for (var i=0; i<arr.length; i++) {
		if (arr[i] === el) return true;
	}
	return false;
}

function clone(obj) {
	var newo = {};
	for(var k in Object.keys(obj)) {
		newo[k] = obj[k];
	}
	return newo;
}

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
	module.exports = rules;
}

},{"./justifier.js":5,"./rule.js":6,"./util":8}],8:[function(require,module,exports){
var util = {};
debugMode = false;
util.debug = function debug() {
	if (typeof debugMode !== "undefined" && debugMode)
		console.log.apply(console, Array.prototype.slice.call(arguments));
};

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
	module.exports = util;
}

},{}],9:[function(require,module,exports){
var rules = require("./rules");
var u = require("./util");

  class Statement {
	  constructor (sentenceAST, justificationAST, scope, loc, isFirst, isLast) {
      this.isFirst = isFirst;
      this.isLast = isLast;
      this.sentenceAST = sentenceAST;
      this.scope = scope;
      this.justificationAST = justificationAST;
      this.loc = loc;
    }

    isFirstStmt() { return this.isFirst; }
		isLastStmt() { return this.isLast; }
		getSentence() { return this.sentenceAST;	}
		getScope() { return this.scope; }
		getJustification() { return this.justificationAST; }
		getMeta() { return this.loc; }
	}

var Verifier = (function() {
	var debugMode = false;
	var obj = this;

	obj.verifyFromAST = function(ast) {
		var proof = preprocess(ast);
		return obj.verify(proof);
	};

	// proof = { 1 : Statement(), 2 : Statement() ... };
	obj.verify = function(proof) {
	  var result = {
      message : "Proof is valid.",
      valid : true,
      premiseAllowed : true,
      remainingSorries : 0
    };
		for (var i=0; i<proof.steps.length; i++) {
			obj.validateStatement(result, proof, i);
			if (! result.valid) {
				break;
			}
		}
		return result;
	};

	obj.validateStatement = function validateStatement(result, proof, step) {
		var stmt = proof.steps[step];
		if (stmt[0] === 'error') {
			result.valid = false;
			result.message = "Proof invalid due to syntax errors."; 
			result.errorStep = step + 1;
			return;
		}

    var why = stmt.getJustification();
    u.debug('why', why);
    if(why[0] == "premise") {
      if(!result.premiseAllowed) {
			  result.valid = false;
			  result.message = "Introducing premises is only allowed at the start of a proof.";
			  result.errorStep = step + 1;
			  return;
      }
    } else {
      result.premiseAllowed = false;
    }
		// var newv = null;
		// if (why[0].split('.').length == 2)
		// 	newv = why[0].split('.')[1];
    if(why[0] == "sorry"){
      result.remainingSorries += 1;
    }
		var validator = obj.lookupValidator(why);
		if (typeof validator === 'function') {
			var part = why[2];
      var lines = why[3];
      var subst = why[4];
			// var subst = null;
			// if (newv && why[4]) subst = [newv, why[4]];
			var isValid = validator(proof, step, part, lines, subst);
			if (isValid === true) {
				result.valid = true;
			} else {
				result.valid = false;
				result.message = isValid;
				result.errorStep = step + 1;
				result.errorSrcLoc = stmt.getMeta();
			}
			return;
		} else if (typeof validator === "string") {
			result.valid = false;
			result.message = validator;
			result.errorStep = step + 1;
			result.errorSrcLoc = stmt.getMeta();
		}
		result.valid = false;
	};

	obj.lookupValidator = function lookupValidator(why) {
		var name = why[0].toLowerCase();
		if (name.split('.').length == 2)
			name = name.split('.')[0] + ".";
		var rule = rules[name];
		if (!rule) return "Cannot find rule: " + name;
		if (rule.getType() === "simple" || rule.getType() === "derived") {
			var fn = rule.getSimpleVerifier();
			if (!fn) throw new Error("Not implemented for " + name);
			return fn.exec;
		}

		if (why[1]) {
			var elimOrIntro = why[1].toLowerCase();
			if ("introduction".indexOf(elimOrIntro) === 0) {
				var fn = rule.getIntroVerifier();
				if (!fn) throw new Error("Not implemented for " + name);
				return fn.exec;
			} else if ("elimination".indexOf(elimOrIntro) === 0) {
				var fn = rule.getElimVerifier();
				if (!fn) throw new Error("Not implemented for " + name);
				return fn.exec;
			}
			return "Cannot determine elim/intro rule type from " + elimOrIntro;
		}
		
		return "Unrecognized rule: " + why[0] + " " + (why[1] ? why[1] : "")  + (why[2] ? why[2] : "") + " " + (why[3] ? why[3] : "");
	}

	obj.preprocess = function preprocess(ast) {
		var proof = { steps : [] };
		obj.preprocessBox(proof, ast, 0, []);
    u.debug("processed proof", proof);
		return proof;
	}

  obj.preprocessBox = function preprocessBox(proof, ast, step, scope) {
    u.debug('ast', ast);
		for(var i=0; i<ast.length; i++) {
			if (ast[i][0] === 'rule') {
				proof.steps[step] = new Statement(ast[i][1], ast[i][2], scope, ast[i][3], i == 0, i == ast.length - 1);
				step = step + 1;
			} else if (ast[i][0] === 'folbox') {
				var newScope = scope.slice(0)
				newScope.push(ast[i][2][1]);
        u.debug('folbox', 'step', step, 'scope', scope, 'newScope', newScope);
				step = obj.preprocessBox(proof, ast[i][1], step, newScope);
			} else if (ast[i][0] === 'box') {
				var newScope = scope.slice(0)
				// newScope.push(null);
        u.debug('box', 'step', step, 'scope', scope, 'newScope', newScope);
				step = obj.preprocessBox(proof, ast[i][1], step, newScope);
			} else if (ast[i][0] === 'error') {
				proof.steps[step] = ast[i];
			}
		}
		return step;
	}

  return obj;
})();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
	exports.Verifier = Verifier;
}

},{"./rules":7,"./util":8}]},{},[9])(9)
});
